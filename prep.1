.Dd May 7, 2017
.Dt PREP 1
.
.Sh NAME
.
.Nm prep
.Nd Read from stdin and prepend a string to each line while preserving identation.
.
.Sh SYNOPSIS
.
.Nm
.Op Ar prefix
.
.Sh DESCRIPTION
.
.Nm
is a tool for prefixing blocks of text. It reads from stdin, detects
the indentation of the first line and proceeds to prepend the passed
prefix to each line. If the prefix argument is omited it defaults
to `#`. Lines containing only white space are preserved.
.Pp
It is intended to be used from text editors that support piping
blocks of text to external tools.
.
.Sh EXAMPLES
.
Using it directly from the command line is straightforward:
.Pp
.Dl $ cat foo.cr
.Dl "  def foo"
.Dl "    puts \"foo\""
.Dl "  end"
.Pp
.Dl $ cat foo.cr | prep
.Dl "  # def foo"
.Dl "  #   puts \"foo\""
.Dl "  # end"
.Pp
.Dl $ cat foo.cr | prep --
.Dl "  -- def foo"
.Dl "  --   puts \"foo\""
.Dl "  -- end"
.Pp
If you use vis, you can select a block of text and run this command:
.Pp
.Dl :|prep
.Pp
You can also pass a string to use for the comment:
.Pp
.Dl :|prep --
.Pp
Usage is similar with vim:
.Pp
.Dl :'<,'>!prep
.Pp
As vim gives a special meaning to some characters, you may have to
escape them:
.Pp
.Dl :'<,'>!prep \e%
.Pp
.
.Sh AUTHOR
.An Michel Martens Aq mail@soveran.com
